# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import (
    QWidget,
    QApplication,
    QComboBox,
    QHBoxLayout,
    QLabel,
    QPushButton,
    QTextEdit,
    QPlainTextEdit,
    QVBoxLayout,
    QSizePolicy,
    QButtonGroup,
    QSlider,
    QShortcut,
    QRadioButton,
    QProgressBar,
    QFileDialog,
    QCheckBox,
    QCheckBox,
)


class Ui_main_widget(object):
    def setupUi(self, main_widget):
        # Some buttons
        self.play_button = QPushButton("Play")
        self.undo_button = QPushButton("Undo")
        self.reset_button = QPushButton("Reset")
        self.eraser_button = QPushButton("Eraser")
        self.model_button = QPushButton("Model")
        self.infer_button = QPushButton("Inference")
        self.save_button = QPushButton("Save")
        self.portion1_button = QPushButton("Portion 1")
        self.portion2_button = QPushButton("Portion 2")
        self.portion3_button = QPushButton("Portion 3")
        self.portion4_button = QPushButton("Portion 4")

        # Display the frame count
        self.frame_log = QTextEdit()
        self.frame_log.setMaximumHeight(28)
        self.frame_log.setMaximumWidth(120)
        self.frame_log.setReadOnly(True)

        # Display the timeline slider
        self.tl_slider = QSlider(Qt.Horizontal)
        self.tl_slider.setMinimum(0)
        self.tl_slider.setValue(0)
        self.tl_slider.setTickPosition(QSlider.TicksBelow)
        self.tl_slider.setTickInterval(10)

        # Brush size slider
        self.brush_size_bar = QSlider(Qt.Horizontal)
        self.brush_size_bar.setMinimumWidth(150)
        self.brush_size_bar.setMinimum(1)
        self.brush_size_bar.setMaximum(4)
        self.brush_size_bar.setValue(1)
        self.brush_size_bar.setTickPosition(QSlider.TicksBelow)
        self.brush_size_bar.setTickInterval(1)

        # Brush size label
        self.brush_size_label = QLabel("Brush Size: 1")
        self.brush_size_label.setMinimumWidth(100)
        self.brush_size_label.setAlignment(Qt.AlignCenter)

        # Brightness adjust slider
        self.brightness_bar = QSlider(Qt.Horizontal)
        self.brightness_bar.setMinimumWidth(150)
        self.brightness_bar.setMinimum(0)
        self.brightness_bar.setMaximum(100)

        # Contrast adjust slider
        self.contrast_bar = QSlider(Qt.Horizontal)
        self.contrast_bar.setMinimumWidth(150)
        self.contrast_bar.setMinimum(0)
        self.contrast_bar.setMaximum(100)
        self.contrast_bar.setValue(80)

        # Brightness label
        self.brightness_label = QLabel("Brightness")
        self.brightness_label.setMinimumWidth(20)
        self.brightness_label.setAlignment(Qt.AlignCenter)

        # Contrast label
        self.contrast_label = QLabel("Contrast")
        self.contrast_label.setMinimumWidth(20)
        self.contrast_label.setAlignment(Qt.AlignCenter)

        # Threshold adjust slider
        self.threshold_bar = QSlider(Qt.Horizontal)
        self.threshold_bar.setMinimumWidth(150)
        self.threshold_bar.setMinimum(0)
        self.threshold_bar.setMaximum(100)
        self.threshold_bar.setValue(20)

        # Threshold label
        self.threshold_label = QLabel("Threshold")
        self.threshold_label.setMinimumWidth(20)
        self.threshold_label.setAlignment(Qt.AlignCenter)

        # Radio buttons for type of interactions
        self.interaction_group = QButtonGroup()
        self.radio_bbox = QRadioButton("Box")
        self.radio_free = QRadioButton("Free")
        self.interaction_group.addButton(self.radio_bbox)
        self.interaction_group.addButton(self.radio_free)
        self.radio_free.toggle()

        # Main canvas -> QLabel
        self.main_canvas = QLabel()
        self.main_canvas.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.main_canvas.setMinimumSize(100, 100)
        self.main_canvas.setAlignment(Qt.AlignCenter)
        self.main_canvas.setMouseTracking(True)

        # Minimap -> Also a QLbal
        self.minimap = QLabel()
        self.minimap.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.minimap.setMinimumSize(100, 100)
        self.minimap.setAlignment(Qt.AlignTop | Qt.AlignHCenter)

        # Zoom-in buttons
        self.zoom_p_button = QPushButton("Zoom +")

        # Zoom-out buttons
        self.zoom_m_button = QPushButton("Zoom -")

        # Record the current timestamp information
        self.ts_label = QLabel("Timestamp:")
        self.ts_label.setMaximumSize(QtCore.QSize(100, 40))
        self.ts_label.setAlignment(Qt.AlignCenter)
        self.ts_log = QtWidgets.QTextEdit()
        self.ts_log.setMinimumSize(QtCore.QSize(300, 40))
        self.ts_log.setMaximumHeight(40)
        self.ts_log.setReadOnly(True)

        # set the font size to 17
        font = self.ts_log.font()
        font.setPointSize(17)
        self.ts_log.setFont(font)

        # Console on the GUI
        self.console = QPlainTextEdit()
        self.console.setMinimumSize(QtCore.QSize(100, 20))
        self.console.setMaximumHeight(50)
        self.console.setReadOnly(True)

        # To enable/disable auto_save
        self.auto_save_btn = QCheckBox("Auto Save")

        # Navigator
        self.navi = QHBoxLayout()

        self.navi.addWidget(self.frame_log)
        self.navi.addWidget(self.play_button)

        # Add interact_box
        self.interact_subbox = QtWidgets.QVBoxLayout()
        self.interact_topbox = QtWidgets.QHBoxLayout()
        self.interact_botbox = QtWidgets.QHBoxLayout()

        self.interact_topbox.addWidget(self.radio_bbox)
        self.interact_topbox.addWidget(self.radio_free)
        self.interact_topbox.addWidget(self.brush_size_label)
        self.interact_botbox.addWidget(self.brush_size_bar)
        self.interact_subbox.addLayout(self.interact_topbox)
        self.interact_subbox.addLayout(self.interact_botbox)
        self.navi.addLayout(self.interact_subbox)

        # Add image process box
        self.image_process_subbox = QtWidgets.QVBoxLayout()
        self.image_process_topbox = QtWidgets.QHBoxLayout()
        self.image_process_botbox = QtWidgets.QHBoxLayout()

        self.image_process_topbox_2 = QtWidgets.QHBoxLayout()
        self.image_process_botbox_2 = QtWidgets.QHBoxLayout()

        self.image_process_topbox.addWidget(self.brightness_label)
        self.image_process_botbox.addWidget(self.brightness_bar)
        self.image_process_topbox_2.addWidget(self.contrast_label)
        self.image_process_botbox_2.addWidget(self.contrast_bar)

        self.image_process_subbox.addLayout(self.image_process_topbox)
        self.image_process_subbox.addLayout(self.image_process_botbox)
        self.image_process_subbox.addLayout(self.image_process_topbox_2)
        self.image_process_subbox.addLayout(self.image_process_botbox_2)

        self.image_process_subbox_2 = QtWidgets.QVBoxLayout()
        self.image_process_topbox_3 = QtWidgets.QHBoxLayout()
        self.image_process_botbox_3 = QtWidgets.QHBoxLayout()

        self.image_process_topbox_3.addWidget(self.threshold_label)
        self.image_process_botbox_3.addWidget(self.threshold_bar)

        self.image_process_subbox_2.addLayout(self.image_process_topbox_3)
        self.image_process_subbox_2.addLayout(self.image_process_botbox_3)

        self.navi.addLayout(self.image_process_subbox)
        self.navi.addLayout(self.image_process_subbox_2)

        self.navi.addWidget(self.eraser_button)
        self.navi.addWidget(self.undo_button)
        self.navi.addWidget(self.reset_button)

        self.navi.addStretch(1)
        self.navi.addWidget(self.portion1_button)
        self.navi.addWidget(self.portion2_button)
        self.navi.addWidget(self.portion3_button)
        self.navi.addWidget(self.portion4_button)
        self.navi.addWidget(self.auto_save_btn)

        # self.navi.addWidget(self.model_button)
        # self.navi.addWidget(self.infer_button)
        self.navi.addWidget(self.save_button)
        self.navi.addStretch(1)

        # draw area
        draw_area = QHBoxLayout()
        draw_area.addWidget(self.main_canvas, 4)

        # Minimap area layout
        minimap_area = QVBoxLayout()
        minimap_ctrl = QHBoxLayout()
        ts_record = QHBoxLayout()

        mini_label = QLabel("Minimap")
        minimap_area.setAlignment(Qt.AlignTop)
        mini_label.setAlignment(Qt.AlignTop)
        minimap_area.addWidget(mini_label)

        # Set the minimap control button
        minimap_ctrl.setAlignment(Qt.AlignTop)
        minimap_ctrl.addWidget(self.zoom_p_button)
        minimap_ctrl.addWidget(self.zoom_m_button)

        # Set the timestamp record area
        ts_record.setAlignment(Qt.AlignLeft)
        ts_record.addWidget(self.ts_label)
        ts_record.addWidget(self.ts_log)

        # Set the minimap area and console
        minimap_area.addLayout(minimap_ctrl)
        minimap_area.addWidget(self.minimap)
        minimap_area.addLayout(ts_record)
        minimap_area.addWidget(self.console)

        draw_area.addLayout(minimap_area, 2)

        # Set the main layout
        self.layout = QVBoxLayout()
        self.layout.addLayout(draw_area)
        self.layout.addWidget(self.tl_slider)
        self.layout.addLayout(self.navi)

        # timer
        self.timer = QTimer()
        self.timer.setSingleShot(False)
